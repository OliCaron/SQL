drop table LAB_LIVRE cascade constraints;
drop table LAB_MAISON_EDITION cascade constraints;
drop table LAB_ACHAT cascade constraints;
drop table LAB_CLIENT cascade constraints;

create table LAB_LIVRE (
NO_LIVRE number(6) not null,
TITRE_LIV varchar2(30) not null,
NB_INVENTAIRE_LIV number(6) default 0 not null,
MNT_PRIX_VENTE_LIV number(6,2) default 0.0 not null, 
constraint PK_LIVRE primary key(NO_LIVRE));

create table LAB_MAISON_EDITION (
NO_MAISON number(6) generated by default as identity start with 33333 increment by 2,
NOM_MAI varchar2(30) not null,
TEL_MAI varchar2(10) not null,
COURRIEL_MAI varchar2(30) not null,
constraint PK_MAISON_EDITION primary key(NO_MAISON));

create table LAB_CLIENT (
NO_CLIENT number(6) not null,
NOM_CLI varchar2(30) not null,
TEL_CLI varchar2(10) not null,
COURRIEL_CLI varchar2(30) not null,
constraint PK_CLIENT primary key(NO_CLIENT),
constraint AK_CLI_COURRIEL unique(COURRIEL_CLI));

drop sequence NO_CLIENT_SEQ;
create sequence NO_CLIENT_SEQ
start with 15 increment by 5;

create table LAB_ACHAT (
NO_MAISON number(6) not null,
NO_LIVRE number(6) not null,
MNT_PRIX_ACH number(6, 2) default 0.0 not null,
DATE_ACH date not null,
constraint PK_ACHAT primary key(NO_MAISON, NO_LIVRE),
constraint FK_AC_NO_MAISON foreign key(NO_MAISON) references LAB_MAISON_EDITION(NO_MAISON),
constraint CT_PRIX_ACH_SUPERIEUR_EGAL_0 check(MNT_PRIX_ACH >= 0),
constraint FK_AC_NO_LIVRE foreign key(NO_LIVRE) references LAB_LIVRE(NO_LIVRE));

alter table LAB_CLIENT add CODE_POSTAL_CLI char(6) null;

alter table LAB_CLIENT drop (CODE_POSTAL_CLI);

alter table LAB_CLIENT add constraint AK_CLI_TEL_CLI unique(TEL_CLI);

alter table LAB_MAISON_EDITION add constraint AK_MAI_NOM_MAI unique(NOM_MAI);

alter table LAB_MAISON_EDITION add constraint AK_MAI_TEL_MAI unique(TEL_MAI);

alter table LAB_MAISON_EDITION add constraint AK_MAI_COURRIEL_MAI unique(COURRIEL_MAI);

insert into LAB_LIVRE(NO_LIVRE, TITRE_LIV, NB_INVENTAIRE_LIV, MNT_PRIX_VENTE_LIV)
values (551, 'Des fleurs', 112, 9.99);

insert into LAB_MAISON_EDITION(NO_MAISON, NOM_MAI, TEL_MAI, COURRIEL_MAI)
values (120, 'Hayrolle', 4185556523, 'info@hayrolle.com');

insert into LAB_CLIENT(NO_CLIENT, NOM_CLI, TEL_CLI, COURRIEL_CLI)
values(NO_CLIENT_SEQ.nextval,
(select NOM_MAI from LAB_MAISON_EDITION  where NO_MAISON = 120), 
(select TEL_MAI from LAB_MAISON_EDITION  where NO_MAISON = 120),
(select COURRIEL_MAI from LAB_MAISON_EDITION  where NO_MAISON = 120));

insert into LAB_ACHAT(NO_MAISON, NO_LIVRE, MNT_PRIX_ACH, DATE_ACH)
values ((select NO_MAISON from LAB_MAISON_EDITION  where NO_MAISON = 120),
(select NO_LIVRE from LAB_LIVRE  where NO_LIVRE = 551), 5, to_date('15-01-01', 'RR-MM-DD'));


insert into LAB_CLIENT (NO_CLIENT, NOM_CLI, TEL_CLI, COURRIEL_CLI) values (NO_CLIENT_SEQ.nextval,  'Louis Tremblay', '4185557887', 'lt@moncourriel.com');
insert into LAB_CLIENT (NO_CLIENT, NOM_CLI, TEL_CLI, COURRIEL_CLI) values (NO_CLIENT_SEQ.nextval,  'Lucie Gamache', '4185556582', 'luga23@hotmail.ch');
insert into LAB_CLIENT (NO_CLIENT, NOM_CLI, TEL_CLI, COURRIEL_CLI) values (NO_CLIENT_SEQ.nextval,  'Julie Simard', '5804125456', 'julie@juliesimard.com');
insert into LAB_CLIENT (NO_CLIENT, NOM_CLI, TEL_CLI, COURRIEL_CLI) values (NO_CLIENT_SEQ.nextval,  'Jean Paré', '5147894552', 'info@info.ca');
insert into LAB_CLIENT (NO_CLIENT, NOM_CLI, TEL_CLI, COURRIEL_CLI) values (NO_CLIENT_SEQ.nextval,  'Thomas voyer',  '5145213599',  'voyert@outlook.uk');	

insert into LAB_LIVRE (NO_LIVRE,TITRE_LIV,NB_INVENTAIRE_LIV,MNT_PRIX_VENTE_LIV) values (894,'Un très bon livre',45,19.99);
insert into LAB_LIVRE (NO_LIVRE,TITRE_LIV,NB_INVENTAIRE_LIV,MNT_PRIX_VENTE_LIV) values (654,'Le meilleur du possible',54,1.66);
insert into LAB_LIVRE (NO_LIVRE,TITRE_LIV,NB_INVENTAIRE_LIV,MNT_PRIX_VENTE_LIV) values (321,'La coupe est pleine',12,31.54);
insert into LAB_LIVRE (NO_LIVRE,TITRE_LIV,NB_INVENTAIRE_LIV,MNT_PRIX_VENTE_LIV) values (123,'Les étoiles sont lumineuses',152,47.95);

insert into LAB_MAISON_EDITION (NOM_MAI,TEL_MAI,COURRIEL_MAI) values ('Maison du livre','4185554569','info@maisonlivre.com');
insert into LAB_MAISON_EDITION (NOM_MAI,TEL_MAI,COURRIEL_MAI) values ('Wisley','4185554452','wisley@wisley.com');
insert into LAB_MAISON_EDITION (NOM_MAI,TEL_MAI,COURRIEL_MAI) values ('Livre pro','5805557788','livre@livrepro.com');
insert into LAB_MAISON_EDITION (NOM_MAI,TEL_MAI,COURRIEL_MAI) values ('Les revendicateurs','6135559987','admin@lesrevendicateurs.com');
insert into LAB_MAISON_EDITION (NOM_MAI,TEL_MAI,COURRIEL_MAI) values ('Les inconfus','6135559932','zinconfus@lesinconfus.com');

insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (120,321,3.79,to_date('15-01-01','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33333,551,20,to_date('15-06-25','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33335,654,3.99,to_date('15-07-01','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33335,894,8.99,to_date('14-09-30','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33333,654,8.99,to_date('15-07-09','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33337,321,8.99,to_date('15-07-09','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33339,321,12.25,to_date('15-07-09','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33341,123,25,to_date('15-06-15','RR-MM-DD'));
insert into LAB_ACHAT (NO_MAISON,NO_LIVRE,MNT_PRIX_ACH,DATE_ACH) values (33339,654,29.99,to_date('15-06-15','RR-MM-DD'));

update LAB_LIVRE
set MNT_PRIX_VENTE_LIV = MNT_PRIX_VENTE_LIV * 0.9
where NB_INVENTAIRE_LIV > 100;

delete from LAB_LIVRE
where NB_INVENTAIRE_LIV < 14;

select * from LAB_LIVRE;
select TITRE_LIV, MNT_PRIX_VENTE_LIV from LAB_LIVRE;
select distinct MNT_PRIX_ACH from LAB_ACHAT;
select TITRE_LIV, MNT_PRIX_VENTE_LIV + 5 from LAB_LIVRE;
select TITRE_LIV, MNT_PRIX_VENTE_LIV + 5 as PRIX_AVEC_FRAIS from LAB_LIVRE;
select TITRE_LIV, round(MNT_PRIX_VENTE_LIV + 5,0) as PRIX_AVEC_FRAIS_ARRONDI from LAB_LIVRE;
select * from LAB_LIVRE where NB_INVENTAIRE_LIV < 50;
select TITRE_LIV, NB_INVENTAIRE_LIV, MNT_PRIX_VENTE_LIV from LAB_LIVRE where MNT_PRIX_VENTE_LIV between 10 and 32;
select * from LAB_MAISON_EDITION where TEL_MAI is null;
select * from LAB_CLIENT where TEL_CLI like '418%' order by COURRIEL_CLI asc;
select avg(MNT_PRIX_ACH) as PRIX_MOYEN, min(MNT_PRIX_ACH) as LE_PETIT_PRIX, max(MNT_PRIX_ACH) as LE_GROS_PRIX from LAB_ACHAT;

/*
Le chapitre 7.2.4 parle d'intégrité référentielle.  Si la clé étrangère dMune table contient une valeur, elle doit absolument référer à un tuple existant 
et valide dans la table parent. Le standard ISO supporte la définition des clés étrangères avec le mot-clé foreign key dans les fonctions create table et alter table. 
Il est impossible de créer une clé étrangère lors d'une opération insert ou update sans qu'il y ait une cohérence entre la valeur de la clé étrangère et la valeur de la 
clé candidate de la table parent. Ce que fera la SQL lors d'une tentative de suppression de clé candidate de la table parent ayant des liens avec la table enfant dépend
de ce qui a été spécifié  avec le on update ou le on delete associé à la clé étrangère. Il y en a 4, cascade qui détruit tout, set null qui détruit dans la table parent
et met la valeur à null dans la table enfant, set default qui détruit dans la table parent et met la valeur à la valeur par défaut spécifiée dans la table enfant et no action
qui lance une exception. Pour l'opération update, la valeur sera mise à jour dans la table enfant.

Question 6.1 :  Le DDL qui sert à définir la structure de la base de données ainsi qu'à contrôler l'accès aux données
                Le DML qui sert à récupérer et mettre à jour les données
                
Question 6.2 :  Le langage SQL est un langage relativement facile à apprendre car il untilise des mots communs en anglais
                C'est un langage non procédural donc nous spécifions seulement l'information dont nous avons besoin et non comment aller la chercher
                
Question 7.2    Le IFF est très important car il permet d'imposer des contraintes afin de protéger la base de données des inconsistences et incohérences. 
                Le mot-clé constraints nous permet d'imposer ces contraintes. Nous pouvons faire des clés primaires, des clés alternatives, spécifier si les données peuvent être null ou non,
                spécifier quels types de données nous voulons ou même définir ce que doit être les données, H ou F comme sexe par exemple.
*/




